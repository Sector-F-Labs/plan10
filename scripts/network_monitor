#!/bin/bash

# Network Connectivity Monitor for Plan 10
# Monitors network connectivity during power transitions

show_help() {
    echo "🌐 Network Connectivity Monitor"
    echo "=============================="
    echo ""
    echo "Usage: network_monitor [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -c, --continuous  Monitor continuously (Ctrl+C to stop)"
    echo "  -t, --test     Run single connectivity test"
    echo "  -i, --interval SEC  Set monitoring interval (default: 5 seconds)"
    echo "  -g, --gateway  Ping gateway instead of external hosts"
    echo ""
    echo "Examples:"
    echo "  network_monitor -t          # Single test"
    echo "  network_monitor -c          # Continuous monitoring"
    echo "  network_monitor -c -i 2     # Monitor every 2 seconds"
    echo "  network_monitor -g          # Test gateway connectivity only"
}

get_network_info() {
    local interface=$(route get default 2>/dev/null | grep interface | awk '{print $2}')
    local gateway=$(route get default 2>/dev/null | grep gateway | awk '{print $2}')
    local wifi_status=$(networksetup -getairportpower en0 2>/dev/null | awk '{print $3}')
    
    echo "Interface: ${interface:-"Unknown"}"
    echo "Gateway: ${gateway:-"Unknown"}"
    echo "WiFi Power: ${wifi_status:-"Unknown"}"
}

test_connectivity() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local power_source=$(pmset -g batt | head -1 | grep -o "Power\|Battery")
    local battery_pct=$(pmset -g batt | grep -o '[0-9]*%' | head -1)
    
    # Get network interface info
    local interface=$(route get default 2>/dev/null | grep interface | awk '{print $2}')
    local gateway=$(route get default 2>/dev/null | grep gateway | awk '{print $2}')
    
    # Test gateway connectivity
    local gateway_result="❌"
    if [[ -n $gateway ]]; then
        if ping -c 1 -W 1000 "$gateway" >/dev/null 2>&1; then
            gateway_result="✅"
        fi
    fi
    
    # Test external connectivity (if not gateway-only mode)
    local external_result="❌"
    if [[ $gateway_only != "true" ]]; then
        if ping -c 1 -W 2000 8.8.8.8 >/dev/null 2>&1; then
            external_result="✅"
        fi
    fi
    
    # Test DNS resolution
    local dns_result="❌"
    if nslookup google.com >/dev/null 2>&1; then
        dns_result="✅"
    fi
    
    # Power assertions check
    local caffeinate_running="❌"
    if pgrep caffeinate >/dev/null 2>&1; then
        caffeinate_running="✅"
    fi
    
    # Format output
    if [[ $gateway_only == "true" ]]; then
        printf "%s | %s %s | %s:%s | Gateway:%s | DNS:%s | Caffeinate:%s\n" \
            "$timestamp" "$power_source" "$battery_pct" "$interface" "$gateway" \
            "$gateway_result" "$dns_result" "$caffeinate_running"
    else
        printf "%s | %s %s | %s:%s | Gateway:%s | External:%s | DNS:%s | Caffeinate:%s\n" \
            "$timestamp" "$power_source" "$battery_pct" "$interface" "$gateway" \
            "$gateway_result" "$external_result" "$dns_result" "$caffeinate_running"
    fi
}

continuous_monitor() {
    echo "🌐 Starting continuous network monitoring (interval: ${interval}s)"
    echo "Press Ctrl+C to stop"
    echo ""
    echo "Timestamp             | Power   | Interface | Gateway | External | DNS | Caffeinate"
    echo "------------------------------------------------------------------------------------"
    
    while true; do
        test_connectivity
        sleep "$interval"
    done
}

single_test() {
    echo "🌐 Network Connectivity Test"
    echo "============================"
    echo ""
    
    echo "📊 Current Network Status:"
    get_network_info
    echo ""
    
    echo "🔋 Power Status:"
    pmset -g batt | head -1
    echo ""
    
    echo "🌐 Connectivity Test:"
    test_connectivity
    echo ""
    
    echo "🔒 Power Assertions:"
    pmset -g assertions | grep -E "(PreventSystemSleep|PreventUserIdleSystemSleep)" | head -3
}

# Default values
interval=5
continuous=false
gateway_only=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--continuous)
            continuous=true
            shift
            ;;
        -t|--test)
            continuous=false
            shift
            ;;
        -i|--interval)
            interval="$2"
            shift 2
            ;;
        -g|--gateway)
            gateway_only=true
            shift
            ;;
        *)
            echo "❌ Unknown option: $1"
            echo "Use 'network_monitor --help' for usage information"
            exit 1
            ;;
    esac
done

# Validate interval
if ! [[ "$interval" =~ ^[0-9]+$ ]] || [[ "$interval" -lt 1 ]]; then
    echo "❌ Invalid interval: $interval (must be a positive integer)"
    exit 1
fi

# Main execution
if [[ $continuous == true ]]; then
    continuous_monitor
else
    single_test
fi